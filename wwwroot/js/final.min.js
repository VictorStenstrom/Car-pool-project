"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
//
// Inviewanimation
// v1.0 - (by Isak?)

(function () {
  var ivaobjects = document.querySelectorAll("[data-inviewanimation]");
  function checkIVAObjects() {
    for (var x = 0; x < ivaobjects.length; x++) {
      var rect = ivaobjects[x].getBoundingClientRect();
      if (ivaobjects[x].hasAttribute("data-inviewanimation") && rect.top < window.innerHeight && rect.bottom > 0) {
        ivaobjects[x].removeAttribute("data-inviewanimation");
        ivaobjects[x].classList.add("inview");
      }
    }
  }
  checkIVAObjects();
  document.addEventListener("scroll", checkIVAObjects, false);
})();
// Polyfill to enable .forEach from .querySelectorAll in older IE-browsers
if (window.NodeList && !NodeList.prototype.forEach) {
  NodeList.prototype.forEach = function (callback, thisArg) {
    thisArg = thisArg || window;
    for (var i = 0; i < this.length; i++) {
      callback.call(thisArg, this[i], i, this);
    }
  };
}
var Easyweb = function () {
  "use strict";

  var version = "1.6";
  var init = function init(options) {
    // Set options if provided
    //
    setOptions(options);

    // Runs the cookie bar handler script immediately
    //
    initCookieFunctionality();

    // Initializes simple toogle mode with:
    // ew-toggle="classname"
    //
    registerTogglers();

    // Registrerar möjlighet för en "scroll-load"-funktion vid långa listor för "auto-paging"
    // (följande X antal satt i byggaren appendas till listan när ens scroll närmar sig botten)
    //
    registerAutoLoad();

    // Registrerar möjlighet för en "klick-load"-knapp vid långa listor för "auto-paging"
    // (följande X antal satt i byggaren appendas till listan när man klickar på en knapp, ex. "Ladda fler")
    //
    registerClickLoad();

    // .state--active för labels och auto-resize för textarea
    //
    registerFormFunctions();

    // Instagram-komponent-loader som hämtar instagram-innehåll med ajax för efter att sidan laddats in om komponenten finns
    // Se: https://gitlab.sphinx.se/albatross/albatross-source/-/tree/master/Plugins/Albatross.Plugins.Instagram
    //
    registerEwsInstagram();

    // Ponty-komponent-loader som hämtar ponty-jobs med ajax för efter att sidan laddats in om komponenten finns
    //
    registerEwsPonty();
  };

  //#region - Consent cookie -

  /**
   * Plockar upp klick på kakans knapp, sätter kaka för att registrera att den klickats på, tar sedan bort klassen 'hidden' från kak-containern om kaka redan finns
   * */
  var initCookieFunctionality = function initCookieFunctionality() {
    var privacyCookieName = "EW.Privacy.Consent";
    var removeCookieBar = function removeCookieBar(cookieContainerElement) {
      var onRemoveButtonClick = function onRemoveButtonClick(el) {
        var cookieToAdd = privacyCookieName + '=yes;expires=' + new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toGMTString() + ';path=/;samesite=lax';
        document.cookie = cookieToAdd;
        cookieContainerElement.setAttribute('class', 'hidden');
      };
      return onRemoveButtonClick;
    };
    if (document.cookie && document.cookie.indexOf(privacyCookieName) > -1) {
      return;
    }
    var cookieContainerElement = document.getElementById('ew-cookieinfo-container');
    if (!cookieContainerElement) return;
    var cookieButtonElement = document.getElementById('ew-cookieinfo-button-ok');
    if (!cookieButtonElement) return;
    cookieButtonElement.addEventListener('click', removeCookieBar(cookieContainerElement), false);
    cookieContainerElement.setAttribute('class', '');
  };
  //#endregion

  //#region - Run delayed -
  var delayedFunctions = [];
  var delayed = false;
  /** 
   Kör samtliga registrerade delayed functions och avvregistrerar dem sedan.
   */
  var onDelayed = function onDelayed() {
    if (delayedFunctions.length === 0) return;
    delayedFunctions.forEach(function (functionToRun) {
      if (typeof functionToRun === 'function') functionToRun();
    });
    delayedFunctions = [];
  };

  /**
   * Registrerar en funktion att köra delayed, 
   * vilket innebär att den körs först på första scroll, alt. om sidan laddats om efter scroll och scroll-top inte är 0 efter 500ms
   * @param {any} functionToRun Funktionen som kommer att köras vid scroll eller om redan scroll.
   */
  var runDelayed = function runDelayed(functionToRun) {
    // Laddar vi in sidan "scrollad" (reload) körs funktionen direkt efter 500ms
    //
    var currentScrollPosition = window.scrollY || document.documentElement.scrollTop;
    if (currentScrollPosition > 0) {
      if (typeof functionToRun === 'function') window.setTimeout(function () {
        functionToRun();
      }, 500);
      return;
    }
    if (document.body.clientHeight < window.innerHeight) {
      if (typeof functionToRun === 'function') window.setTimeout(function () {
        functionToRun();
      }, 500);
      return;
    }

    // Annars registrerar vi dne som en delayed funktion
    //
    delayedFunctions.push(functionToRun);

    // Om vi inte redan markerat att delay är i play, markerar vi det, och registrerar att onDelayed() ska köras på scroll.
    //
    if (!delayed) {
      delayed = true;
      window.addEventListener("scroll", function () {
        onDelayed();
      });
    }
  };

  //#endregion

  /**
   * Svarar med huruvida debug-läget är aktiverat under körning (ofta enbart vid utvckling)
   * */
  var inDebug = window.albatrossInDebug !== undefined ? window.albatrossInDebug : false;

  /**
   * Kontrollerar om angivet argument är en giltig e-postadress
   * @param {any} emailAddress E-postadress att kontroller
   */
  var isEmail = function isEmail(emailAddress) {
    var pattern = new RegExp(/^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/);
    return pattern.test(emailAddress);
  };
  var defaultOptions = {
    loaderMarkup: "<div class='form-loader'><i class='ew-loader'><i></i></i></div>"
  };
  var setOptions = function setOptions(options) {
    if (options === undefined || _typeof(options) !== 'object') return;
    for (var key in options) {
      defaultOptions[key] = options[key];
    }
    return defaultOptions;
  };

  /**
   * Enkel localstorage-helper via Easyweb.storage.setItem samt Easyweb.storage.getItem.
   * Används med fördel för att vid senare tillfälle uppdatera från localStorage till framtida mer effektiva storage-lösningar
   * */
  var storage = {
    isSupported: "localStorage" in window && null !== window.localStorage,
    setItem: function setItem(key, val) {
      if (!this.isSupported) return;
      if (key === null || key === undefined) window.localStorage.removeItem(key);else window.localStorage.setItem(key, val);
    },
    getItem: function getItem(key) {
      if (!this.isSupported) return null;
      return window.localStorage.getItem(key);
    }
  };

  /**
   * Enkel ajax-laddare för att hämta en url och specificera callback för success samt error.
   * Främst menad att enkelt bygga bort jQuery-beroenden. Inkluderar cache-breaker.
   * @param {any} url Url att anrop
   * @param {any} responseCallback Callback som anropas vid lyckat anrop. Anropas med hela responset (requestet) som argument.
   * @param {any} errorCallback // Callback som anropas vid misslyckat anrop. Anropas med hela responset (requestet) som argument.
   */
  var httpGet = function httpGet(url, responseCallback, errorCallback) {
    var ajax = new XMLHttpRequest();
    ajax.onreadystatechange = function () {
      if (this.readyState === 4) {
        if (this.status === 200) {
          if (typeof responseCallback !== 'undefined') responseCallback(this);
        } else {
          if (typeof errorCallback !== 'undefined') errorCallback(this);
        }
      }
    };
    var cacheBreaker = Date.now();
    url += url.indexOf("?") > -1 ? "&jq=" + cacheBreaker : "?jq=" + cacheBreaker;
    ajax.open("GET", url, true);
    ajax.setRequestHeader("Content-Type", "application/json");
    ajax.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    ajax.send();
  };

  // Pager counter to know how much we have and should load
  // Notis: Statisk = fungerar bra för en per page load. Bör faktoreras om.
  var currentPage = 1;

  // #region - Auto load on scroll -
  var registerAutoLoad = function registerAutoLoad() {
    // Quick & dirty element cheon to see whether we should use scroll load
    var autoScrollCallElement = document.getElementById("scroll-load");
    if (autoScrollCallElement) {
      var onFrame = function onFrame() {
        onScroll();
        throttled = false;
      };
      var onScroll = function onScroll() {
        // Return if we're out of items or is already loading an item batch
        if (autoScrollLoading || reachedEndOfItems) return false;
        if (lastElementPosFromTop < 1) {
          // Mark that we're loading a batch
          autoScrollLoading = true;
          // Increase the current pager page loaded
          currentPage++;

          // Dirty url creation for the ajax endpoint
          var requestUrl = autoScrollCallElement.getAttribute("href") || window.location.pathname;
          // Home path needs to be appended with /home as /template without following url is a potential article url
          if (requestUrl === "/") requestUrl = "/home";
          requestUrl += autoScrollKey + "&p=" + currentPage;

          // To use if neccessary
          var currentCount = itemContainer.querySelectorAll(itemSelector).length;

          // Load moar!
          httpGet("/template" + requestUrl, function (response) {
            // make elements out of html
            var loadedItems = document.createRange().createContextualFragment(response.responseText);

            // If server returned less than our page size, we've reached the end.
            // 6 is used for Äktavara, should be rewritten to be more dynamic
            if (loadedItems && loadedItems.childNodes.length < 6) reachedEndOfItems = true;

            // Append them items and fade 'em in, swooosh
            itemContainer.appendChild(loadedItems);

            // We're not longer loading, allowing for the next page to start loading when neccessary
            autoScrollLoading = false;
          });

          // Prevent the browser view to stick to the bottom 
          // after load by making sure the scroll is not at the end.
          window.scrollBy(0, -1);
        }
      };
      var autoScrollKey = "?key=" + autoScrollCallElement.getAttribute("load-key");
      var autoScrollLoading = false;

      // Container for all items (will be appended to)
      var itemContainer = document.querySelector(".auto-load-container");
      // Each individual item, to count
      var itemSelector = ".auto-load-item";

      // Whether the back is out of items to deliver
      var reachedEndOfItems = false;
      var lastElementPosFromTop = 0;
      var throttled = false;

      // On scroll
      document.addEventListener("scroll", function () {
        lastElementPosFromTop = autoScrollCallElement.getBoundingClientRect().y - window.innerHeight;
        if (!throttled) {
          window.requestAnimationFrame(onFrame);
          throttled = true;
        }
      });
    }
  };
  var registerClickLoad = function registerClickLoad() {
    // Quick & dirty element cheon to see whether we should use scroll load
    var clickLoadElement = document.getElementById("click-load");
    if (clickLoadElement) {
      var clickLoading = false;
      var loadKey = clickLoadElement.getAttribute("load-key");

      // Container for all items (will be appended to)
      var itemContainer = document.querySelector(".load-container");
      // Each individual item, to count
      var itemSelector = ".load-item";

      // Whether the back is out of items to deliver
      var reachedEndOfItems = false;

      // On scroll
      clickLoadElement.click(function (e) {
        e.preventDefault();

        // Return if we're out of items or is already loading an item batch
        if (clickLoading || reachedEndOfItems) return false;

        // Mark that we're loading a batch
        clickLoading = true;
        // Increase the current pager page loaded
        currentPage++;

        // Dirty url creation for the ajax endpoint
        var requestUrl = clickLoadElement.getAttribute("href") || window.location.pathname;
        // Home path needs to be appended with /home as /template without following url is a potential article url
        if (requestUrl === "/") requestUrl = "/home";
        requestUrl += loadKey + "&p=" + currentPage;

        // To use if neccessary
        var currentCount = itemContainer.find(itemSelector).length;

        // Load moar!
        httpGet("/template" + requestUrl, function (xhr) {
          // make elements out of html
          var loadedItems = document.createRange().createContextualFragment(response.responseText);

          // If server returned less than our page size, we've reached the end.
          // 6 is used for Äktavara, should be rewritten to be more dynamic
          if (loadedItems && loadedItems.childNodes.length < 6) reachedEndOfItems = true;

          // Append them items and fade 'em in, swooosh
          itemContainer.appendChild(loadedItems);

          // We're not longer loading, allowing for the next page to start loading when neccessary
          clickLoading = false;
        });
      });
    }
  };
  var registerFormFunctions = function registerFormFunctions() {
    //
    // .state--active på labels
    function setActive(a) {
      a.classList.add("state--active");
    }
    function setInactive(a) {
      a.classList.remove("state--active");
    }
    var inputs = document.querySelectorAll("input, textarea");
    setTimeout(function () {
      inputs.forEach(function (el) {
        if (el.value !== null && el.value.length > 0) {
          siblings(el, "label", setActive);
        }
      });
    }, 200);
    inputs.forEach(function (el) {
      el.addEventListener("focus", function () {
        siblings(el, "label", setActive);
      });
    });
    inputs.forEach(function (el) {
      el.addEventListener("blur", function () {
        if (this.value.length < 1) {
          siblings(el, "label", setInactive);
        }
      });
    });

    //
    // auto-resize textarea
    document.querySelectorAll("textarea").forEach(function (el) {
      el.addEventListener("input", function () {
        var cs = window.getComputedStyle(this);
        // reset height to allow textarea to shrink again
        this.style.height = "auto";
        // when "box-sizing: border-box" we need to add vertical border size to scrollHeight
        this.style.height = this.scrollHeight + parseInt(cs.getPropertyValue("border-top-width")) + parseInt(cs.getPropertyValue("border-bottom-width")) + "px";
      });
    });

    /*
        Get siblings of element, optional using selector, option perform callback on them.
        Browser Compatibility:
        IE: -, Safari: 7, Chrome: 27, Edge: 79, Firefox: 32
    */
    function siblings(el, sel, cb) {
      var matches = [];
      var targets = sel ? el.parentNode.querySelectorAll(":scope > " + sel) : el.parentNode.children;
      targets.forEach(function (target) {
        if (target !== el) {
          matches.push(target);
        }
      });
      if (cb) {
        matches.forEach(cb);
      }
      return matches;
    }
  };

  // #endregion

  var registerTogglers = function registerTogglers(node) {
    node = node || document;
    var elements = node.querySelectorAll("[ew-toggle]"),
      targetSelector,
      targetNodes;
    elements.forEach(function (el) {
      targetSelector = el.getAttribute("ew-toggle");
      el.addEventListener("click", function (e) {
        e.preventDefault();
        if (targetSelector) {
          targetSelector = targetSelector.indexOf(".") === 0 || targetSelector.indexOf("#") === 0 ? targetSelector : targetSelector;
          targetNodes = el.parentNode.querySelectorAll(targetSelector);
        } else {
          targetNodes = el.children;
        }
        if (targetNodes) {
          targetNodes.forEach(function (targetEl) {
            toggleClass(targetEl, "open");
          });
        }
      }, false);
      el.removeAttribute("ew-toggle");
    });
  };

  // Toggles a class on an element and stores the value if storageKey is provided
  //
  var toggleClass = function toggleClass(element, cssClass, storageKey) {
    var toggleVal = null;
    if (element.classList.contains(cssClass)) {
      element.classList.remove(cssClass);
      toggleVal = null;
    } else {
      element.classList.add(cssClass);
      toggleVal = "on";
    }
    // Store value if key is specified
    if (storageKey !== undefined) {
      storage.setItem(storageKey, toggleVal);
    }
  };

  // #region BindEwLoad
  var bindEwsLoad = function bindEwsLoad(el, templateKey) {
    if (!templateKey) {
      console.warn("No template key set in ews-attribute");
      return;
    }

    // Hämta data med en liten delay för att inte sega ner first load vid google-pagespeed-mjäk
    runDelayed(function () {
      // Turn on useJsonApi to return json data instead
      var urlPath = location.pathname,
        useJsonApi = false;

      // Home path needs to be appended with /home as /template without following url is a potential article url
      if (urlPath === "/") urlPath = "/home";

      // Full url, like: /template/home?key=instagramfeed
      urlPath = (useJsonApi ? "/api" : "/template") + urlPath + "?key=" + templateKey;

      // Request inner template api with ajax and set response to container
      httpGet(urlPath, function (xhr) {
        if (xhr && xhr.responseText) {
          el.innerHTML = xhr.responseText;
        } else {
          console.warn("Loader returned no response.");
        }
      }, function (err) {
        console.error("Error loading api feed: ", err);
      });
    });
  };
  // #endregion

  // #region - Instagram -
  var registerEwsInstagram = function registerEwsInstagram(node) {
    node = node || document;

    // Attribute to query for and get key value for
    var queryAttributeName = "ews-instagram",
      elements = node.querySelectorAll("[" + queryAttributeName + "]"),
      templateKey;
    elements.forEach(function (el) {
      // Get key set on element printed by the IG-template
      templateKey = el.getAttribute(queryAttributeName);

      // Bind it's load func using element as content-container and key to fetch
      bindEwsLoad(el, templateKey);

      // Remove attribute from element to keep final markupgeneration clean and prevent double registrations
      // if run multiple times
      el.removeAttribute(queryAttributeName);
    });
  };

  // #endregion

  // #region - Ponty -

  var registerEwsPonty = function registerEwsPonty(node) {
    node = node || document;

    // Attribute to query for and get key value for
    var queryAttributeName = "ews-ponty",
      elements = node.querySelectorAll("[" + queryAttributeName + "]"),
      templateKey;
    elements.forEach(function (el) {
      // Get key set on element printed by the IG-template
      templateKey = el.getAttribute(queryAttributeName);

      // Bind it's load func using element as content-container and key to fetch
      bindEwsLoad(el, templateKey);

      // Remove attribute from element to keep final markupgeneration clean and prevent double registrations
      // if run multiple times
      el.removeAttribute(queryAttributeName);
    });
  };

  // #endregion

  // Init to be called if in use. Done at top of site/main/default.js
  //
  return {
    init: init,
    runDelayed: runDelayed,
    httpGet: httpGet,
    isEmail: isEmail,
    storage: storage,
    currentPage: currentPage,
    inDebug: inDebug,
    version: version
  };
}();

//Parallax
var parallaxIt = function parallaxIt(e, target, parent, movement) {
  var relX = e.pageX - offset(parent).left;
  var relY = e.pageY - offset(parent).top;
  var x = (relX - parent.offsetWidth / 2) / parent.offsetWidth * movement;
  var y = (relY - parent.offsetHeight / 2) / parent.offsetHeight * movement;
  target.style.setProperty('--parallax-x', x + "px");
  target.style.setProperty('--parallax-y', y + "px");
};
function offset(el) {
  var rect = el.getBoundingClientRect(),
    scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
    scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  return {
    top: rect.top + scrollTop,
    left: rect.left + scrollLeft
  };
}
function parallaxItem(el, child, speed, remSpeed) {
  $(el).mousemove(function (e) {
    parallaxIt(e, this.querySelector(child), this, speed);
  });
  $(el).mouseleave(function (e) {
    parallaxIt(e, this.querySelector(child), this, remSpeed);
  });
}

/// <reference path="default/easyweb.core.1.0.js" />
/// <reference path="externalsphinxly/inviewanimation.1.0.js" />
/// <reference path="external/jquery.min.js" />

(function () {
  // #region - Init -

  // Init old funcs from EW-lib
  //
  if (typeof window.Easyweb !== "undefined") {
    window.Easyweb.init();
  } else {
    console.warn("easyweb.core.js not present.");
  }

  // #endregion
})();

// Folder structure for site specific code:
//
// js/components
//     Tydligt avskilda komponenter läggs som egna filer här. T.ex. contactMap.js eller productCalculator.js
//
// js/views
//     Sånt som är mindre komponentigt men knutet till en enda vy läggs här.
//
// js/global.js
//     Små globala grejer kan läggas här. Tänk på att avgränsa och klumpa ihop sånt som hör ihop.

var hamburger = document.querySelector('.hamburger');
var heroContent = document.querySelector('.hero');
var submenu = document.querySelector(".submenu");
var dropdown = document.querySelector(".dropdown");

//Hamburger menu start

document.querySelector(".js-hamburger").addEventListener("click", function () {
  var nav = document.querySelector(".nav").classList.toggle("open");
  //const btn = document.querySelector(".btn-header").classList.toggle("open");
  var body = document.querySelector("body").classList.toggle("no-scroll");
  var burger = document.querySelector(".js-hamburger").classList.toggle("open");
});
hamburger.addEventListener("click", function () {
  submenu.classList.add("hamburger-submenu");
  if (heroContent.classList.contains("hide")) {
    heroContent.classList.remove("hide");
  } else {
    heroContent.classList.add("hide");
  }
});

//Hamburger menu end

//Submenu start

dropdown.addEventListener("mouseover", function () {
  submenu.classList.add("show");
});
dropdown.addEventListener("mouseout", function () {
  submenu.classList.remove("show");
});

//Submenu end

// Filter news articles start

var tagBtns = document.querySelectorAll("[data-tag]");
var newsItems = document.querySelectorAll("[card-category]");
if (newsItems.length > 0) {
  tagBtns.forEach(function (btn) {
    btn.addEventListener('click', function () {
      newsItems.forEach(function (article) {
        article.classList.remove("show");
        if (btn.getAttribute("data-tag") === "All") {
          article.classList.remove("show");
          setTimeout(function () {
            article.classList.add('show');
          }, "0.01");
        } else if (article.getAttribute("card-category") === btn.getAttribute('data-tag')) {
          article.classList.remove("show");
          setTimeout(function () {
            article.classList.add('show');
          }, "0.01");
        }
      });
    });
  });
}

//Filter news articles end

//Search article start

if (window.location.href.includes("?q")) {
  if (newsItems.length > 0) {
    var link = createLink("/news", "Rensa", "#69c7a3", "#00bfa5");
    var _newsItems = document.querySelectorAll(".return-button");
    _newsItems.forEach(function (item) {
      return item.appendChild(link);
    });
  } else {
    var text = createText("Inga nyheter hittades");
    var _link = createLink("/news", "Ta mig tillbaka", "#69c7a3", "#00bfa5");
    var _newsItems2 = document.querySelectorAll(".return-button");
    _newsItems2.forEach(function (item) {
      item.appendChild(text);
      item.appendChild(_link);
    });
  }
  document.querySelector('.btn-light-green').scrollIntoView();
}
function createLink(href, text, color, hoverColor) {
  var link = document.createElement("a");
  link.setAttribute("href", href);
  link.textContent = text;
  link.style.color = color;
  link.style.padding = "20px";
  link.style.textDecoration = "none";
  link.style.transition = "color 0.2s ease-in-out";
  link.addEventListener("mouseenter", function () {
    link.style.color = hoverColor;
  });
  link.addEventListener("mouseleave", function () {
    link.style.color = color;
  });
  link.addEventListener("click", function (event) {
    scrollDown();
  });
  return link;
}
function createText(text) {
  var p = document.createElement("p");
  p.textContent = text;
  return p;
}
function scrollDown() {
  var currentPosition = window.pageYOffset || document.documentElement.scrollTop;
  var newPosition = currentPosition + window.innerHeight / 2;
  setTimeout(function () {
    window.scrollTo(0, newPosition);
  }, 2000);
}

//Search article end

//Ineractive map start

//const staticLocations = [{
//    id: 'fsdfosddwdfn345345k',
//    name: 'Dagsmejan',
//    longitude: 59.4472953,
//    latitude: 17.9519484,
//    description: 'lorem ipsum'
//},
//{
//    id: 'sdfikjwseouifger32434fdsf',
//    name: 'Häggvik',
//    longitude: 59.43990219999999,
//    latitude: 17.9306324,
//    description: 'lorem ipsum'
//},
//{
//    id: 'fsdfosdfn345345k',
//    name: 'Kista',
//    longitude: 59.40905590000001,
//    latitude: 17.9501393,
//    description: 'lorem ipsum'
//},
//{
//    id: 'fsdfosdfn345345k',
//    name: 'Kvarteret Sländan',
//    longitude: 59.3488355,
//    latitude: 18.0396816,
//    description: 'lorem ipsum'
//}
//];

var locations = [];
function initMap() {
  var mapElement = document.getElementById("map");
  if (mapElement !== null) {
    var map = new google.maps.Map(mapElement, {
      zoom: 11,
      center: {
        lat: 59.32932349999999,
        lng: 18.0685808
      },
      styles: [{
        "featureType": "water",
        "elementType": "geometry.fill",
        "stylers": [{
          "color": "#d3d3d3"
        }]
      }, {
        "featureType": "transit",
        "stylers": [{
          "color": "#808080"
        }, {
          "visibility": "off"
        }]
      }, {
        "featureType": "road.highway",
        "elementType": "geometry.stroke",
        "stylers": [{
          "visibility": "on"
        }, {
          "color": "#b3b3b3"
        }]
      }, {
        "featureType": "road.highway",
        "elementType": "geometry.fill",
        "stylers": [{
          "color": "#ffffff"
        }]
      }, {
        "featureType": "road.local",
        "elementType": "geometry.fill",
        "stylers": [{
          "visibility": "on"
        }, {
          "color": "#ffffff"
        }, {
          "weight": 1.8
        }]
      }, {
        "featureType": "road.local",
        "elementType": "geometry.stroke",
        "stylers": [{
          "color": "#d7d7d7"
        }]
      }, {
        "featureType": "poi",
        "elementType": "geometry.fill",
        "stylers": [{
          "visibility": "on"
        }, {
          "color": "#ebebeb"
        }]
      }, {
        "featureType": "administrative",
        "elementType": "geometry",
        "stylers": [{
          "color": "#a7a7a7"
        }]
      }, {
        "featureType": "road.arterial",
        "elementType": "geometry.fill",
        "stylers": [{
          "color": "#ffffff"
        }]
      }, {
        "featureType": "road.arterial",
        "elementType": "geometry.fill",
        "stylers": [{
          "color": "#ffffff"
        }]
      }, {
        "featureType": "landscape",
        "elementType": "geometry.fill",
        "stylers": [{
          "visibility": "on"
        }, {
          "color": "#efefef"
        }]
      }, {
        "featureType": "road",
        "elementType": "labels.text.fill",
        "stylers": [{
          "color": "#696969"
        }]
      }, {
        "featureType": "administrative",
        "elementType": "labels.text.fill",
        "stylers": [{
          "visibility": "on"
        }, {
          "color": "#737373"
        }]
      }, {
        "featureType": "poi",
        "elementType": "labels.icon",
        "stylers": [{
          "visibility": "off"
        }]
      }, {
        "featureType": "poi",
        "elementType": "labels",
        "stylers": [{
          "visibility": "off"
        }]
      }, {
        "featureType": "road.arterial",
        "elementType": "geometry.stroke",
        "stylers": [{
          "color": "#d6d6d6"
        }]
      }, {
        "featureType": "road",
        "elementType": "labels.icon",
        "stylers": [{
          "visibility": "off"
        }]
      }, {}, {
        "featureType": "poi",
        "elementType": "geometry.fill",
        "stylers": [{
          "color": "#dadada"
        }]
      }]
    });
    fetchLocations().then(function () {
      setMarkers(map);
    });
  }
}
function fetchLocations() {
  return new Promise(function (resolve, reject) {
    fetch('https://elbilio-admin-server.herokuapp.com/open-locations').then(function (response) {
      return response.json();
    }).then(function (data) {
      data.map(function (location) {
        var locationObject = {
          id: location.id,
          name: location.name,
          longitude: location.longitude,
          latitude: location.latitude,
          description: location.description ? location.description : "",
          imageUrl: location.imageUrl,
          vehicles: location.vehicles.map(function (vehicle) {
            return {
              name: vehicle.name,
              description: vehicle.description ? vehicle.description : ""
            };
          })
        };
        locations.push(locationObject);
      });
      resolve();
    }).catch(function (error) {
      return reject(error);
    });
  });
}
function setMarkers(map) {
  var icon = {
    url: 'https://hemulkommunikation.se/permanent/elbilio/mapbox-icon.png',
    scaledSize: new google.maps.Size(50, 50)
  };
  var shape = {
    coords: [0, 0, 70, 70],
    type: 'rect'
  };
  locations.forEach(function (location) {
    var marker = new google.maps.Marker({
      position: {
        lat: location.latitude,
        lng: location.longitude
      },
      map: map,
      icon: icon,
      shape: shape,
      title: location.name,
      imageUrl: location.imageUrl
    });
    marker.addListener("click", function () {
      var vehiclesList = location.vehicles.map(function (vehicle) {
        return "<li>".concat(vehicle.name, " - ").concat(vehicle.description, "</li>");
      }).join('');
      var contentString = "<div class=\"popup\">\n                      <div class=\"weight-bold\">".concat(location.name, "</div>\n                      <ul>").concat(vehiclesList, "</ul>\n                      <img class=\"car-img\" src=").concat(location.imageUrl, " alt=\"Pool-bil\"/>\n                      <a href=\"https://intercom.help/elbiliohelpcenter/sv/collections/2568250-boka-hyra-och-ladda-fordonet\" class=\"btn btn-secondary btn-light-green\">BOKA</a>\n                      </div>");
      var infoWindow = new google.maps.InfoWindow({
        content: contentString
      });
      infoWindow.open(map, marker);
      map.addListener("click", function () {
        infoWindow.close();
      });
    });
  });
}
window.initMap = initMap;

//Ineractive map end
//# sourceMappingURL=data:application/json;charset=utf8;base64,
